generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(uuid())
  name          String
  username      String    @unique @default(cuid())
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bio           String?
  accounts      Account[]
  sessions      Session[]
  wishes        Wish[] @relation("receiver")
  gifts         Wish[] @relation("sender")
  favorites     Favorite[] @relation("UserToFavorites")
  favoriteTo    Favorite[] @relation("FavoriteToUsers")

  @@map("users")
}


model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
  @@index([userId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Wish {
  id        String    @id @default(cuid())
  title     String
  url       String
  position  Int
  active    Boolean   @default(true)
  available Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId    String?  @map("sender_id")
  receiverId    String  @map("receiver_id")
  sender      User?    @relation("sender",fields:[senderId],references: [id], onDelete: Cascade)
  receiver   User    @relation("receiver",fields:[receiverId],references: [id], onDelete: Cascade)

  @@map("wishes")
  @@index([receiverId])
  @@index([senderId])
}

model Favorite {
  id            String @id @default(uuid())
  userId        String
  favoriteUserId String

  user          User   @relation(fields: [userId], references: [id], name: "UserToFavorites", onDelete: Cascade)
  favoriteUser  User   @relation(fields: [favoriteUserId], references: [id], name: "FavoriteToUsers", onDelete: Cascade)

  @@map("favorites")
  @@index([userId])
  @@index([favoriteUserId])
  @@unique([userId, favoriteUserId])
}
